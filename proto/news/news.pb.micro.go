// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: news/news.proto

package news

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for News service

func NewNewsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for News service

type NewsService interface {
	News(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (News_NewsService, error)
	NewsList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NewsResponse, error)
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (News_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (News_PingPongService, error)
}

type newsService struct {
	c    client.Client
	name string
}

func NewNewsService(name string, c client.Client) NewsService {
	return &newsService{
		c:    c,
		name: name,
	}
}

func (c *newsService) News(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (News_NewsService, error) {
	req := c.c.NewRequest(c.name, "News.News", &emptypb.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &newsServiceNews{stream}, nil
}

type News_NewsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NewsItem, error)
}

type newsServiceNews struct {
	stream client.Stream
}

func (x *newsServiceNews) Close() error {
	return x.stream.Close()
}

func (x *newsServiceNews) Context() context.Context {
	return x.stream.Context()
}

func (x *newsServiceNews) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsServiceNews) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsServiceNews) Recv() (*NewsItem, error) {
	m := new(NewsItem)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newsService) NewsList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NewsResponse, error) {
	req := c.c.NewRequest(c.name, "News.NewsList", in)
	out := new(NewsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "News.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *newsService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (News_StreamService, error) {
	req := c.c.NewRequest(c.name, "News.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &newsServiceStream{stream}, nil
}

type News_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type newsServiceStream struct {
	stream client.Stream
}

func (x *newsServiceStream) Close() error {
	return x.stream.Close()
}

func (x *newsServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *newsServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *newsService) PingPong(ctx context.Context, opts ...client.CallOption) (News_PingPongService, error) {
	req := c.c.NewRequest(c.name, "News.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &newsServicePingPong{stream}, nil
}

type News_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type newsServicePingPong struct {
	stream client.Stream
}

func (x *newsServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *newsServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *newsServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *newsServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for News service

type NewsHandler interface {
	News(context.Context, *emptypb.Empty, News_NewsStream) error
	NewsList(context.Context, *emptypb.Empty, *NewsResponse) error
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, News_StreamStream) error
	PingPong(context.Context, News_PingPongStream) error
}

func RegisterNewsHandler(s server.Server, hdlr NewsHandler, opts ...server.HandlerOption) error {
	type news interface {
		News(ctx context.Context, stream server.Stream) error
		NewsList(ctx context.Context, in *emptypb.Empty, out *NewsResponse) error
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type News struct {
		news
	}
	h := &newsHandler{hdlr}
	return s.Handle(s.NewHandler(&News{h}, opts...))
}

type newsHandler struct {
	NewsHandler
}

func (h *newsHandler) News(ctx context.Context, stream server.Stream) error {
	m := new(emptypb.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NewsHandler.News(ctx, m, &newsNewsStream{stream})
}

type News_NewsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NewsItem) error
}

type newsNewsStream struct {
	stream server.Stream
}

func (x *newsNewsStream) Close() error {
	return x.stream.Close()
}

func (x *newsNewsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *newsNewsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsNewsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsNewsStream) Send(m *NewsItem) error {
	return x.stream.Send(m)
}

func (h *newsHandler) NewsList(ctx context.Context, in *emptypb.Empty, out *NewsResponse) error {
	return h.NewsHandler.NewsList(ctx, in, out)
}

func (h *newsHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.NewsHandler.Call(ctx, in, out)
}

func (h *newsHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.NewsHandler.Stream(ctx, m, &newsStreamStream{stream})
}

type News_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type newsStreamStream struct {
	stream server.Stream
}

func (x *newsStreamStream) Close() error {
	return x.stream.Close()
}

func (x *newsStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *newsStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *newsHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.NewsHandler.PingPong(ctx, &newsPingPongStream{stream})
}

type News_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type newsPingPongStream struct {
	stream server.Stream
}

func (x *newsPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *newsPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *newsPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *newsPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *newsPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *newsPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Api Endpoints for Empty service

func NewEmptyEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Empty service

type EmptyService interface {
	News(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (Empty_NewsService, error)
	NewsList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NewsResponse, error)
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Empty_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Empty_PingPongService, error)
}

type emptyService struct {
	c    client.Client
	name string
}

func NewEmptyService(name string, c client.Client) EmptyService {
	return &emptyService{
		c:    c,
		name: name,
	}
}

func (c *emptyService) News(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (Empty_NewsService, error) {
	req := c.c.NewRequest(c.name, "Empty.News", &emptypb.Empty{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &emptyServiceNews{stream}, nil
}

type Empty_NewsService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*NewsItem, error)
}

type emptyServiceNews struct {
	stream client.Stream
}

func (x *emptyServiceNews) Close() error {
	return x.stream.Close()
}

func (x *emptyServiceNews) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyServiceNews) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyServiceNews) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyServiceNews) Recv() (*NewsItem, error) {
	m := new(NewsItem)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emptyService) NewsList(ctx context.Context, in *emptypb.Empty, opts ...client.CallOption) (*NewsResponse, error) {
	req := c.c.NewRequest(c.name, "Empty.NewsList", in)
	out := new(NewsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emptyService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Empty.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emptyService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Empty_StreamService, error) {
	req := c.c.NewRequest(c.name, "Empty.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &emptyServiceStream{stream}, nil
}

type Empty_StreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type emptyServiceStream struct {
	stream client.Stream
}

func (x *emptyServiceStream) Close() error {
	return x.stream.Close()
}

func (x *emptyServiceStream) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emptyService) PingPong(ctx context.Context, opts ...client.CallOption) (Empty_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Empty.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &emptyServicePingPong{stream}, nil
}

type Empty_PingPongService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type emptyServicePingPong struct {
	stream client.Stream
}

func (x *emptyServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *emptyServicePingPong) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *emptyServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Empty service

type EmptyHandler interface {
	News(context.Context, *emptypb.Empty, Empty_NewsStream) error
	NewsList(context.Context, *emptypb.Empty, *NewsResponse) error
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Empty_StreamStream) error
	PingPong(context.Context, Empty_PingPongStream) error
}

func RegisterEmptyHandler(s server.Server, hdlr EmptyHandler, opts ...server.HandlerOption) error {
	type empty interface {
		News(ctx context.Context, stream server.Stream) error
		NewsList(ctx context.Context, in *emptypb.Empty, out *NewsResponse) error
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
	}
	type Empty struct {
		empty
	}
	h := &emptyHandler{hdlr}
	return s.Handle(s.NewHandler(&Empty{h}, opts...))
}

type emptyHandler struct {
	EmptyHandler
}

func (h *emptyHandler) News(ctx context.Context, stream server.Stream) error {
	m := new(emptypb.Empty)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.EmptyHandler.News(ctx, m, &emptyNewsStream{stream})
}

type Empty_NewsStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*NewsItem) error
}

type emptyNewsStream struct {
	stream server.Stream
}

func (x *emptyNewsStream) Close() error {
	return x.stream.Close()
}

func (x *emptyNewsStream) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyNewsStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyNewsStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyNewsStream) Send(m *NewsItem) error {
	return x.stream.Send(m)
}

func (h *emptyHandler) NewsList(ctx context.Context, in *emptypb.Empty, out *NewsResponse) error {
	return h.EmptyHandler.NewsList(ctx, in, out)
}

func (h *emptyHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.EmptyHandler.Call(ctx, in, out)
}

func (h *emptyHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.EmptyHandler.Stream(ctx, m, &emptyStreamStream{stream})
}

type Empty_StreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type emptyStreamStream struct {
	stream server.Stream
}

func (x *emptyStreamStream) Close() error {
	return x.stream.Close()
}

func (x *emptyStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *emptyHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.EmptyHandler.PingPong(ctx, &emptyPingPongStream{stream})
}

type Empty_PingPongStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type emptyPingPongStream struct {
	stream server.Stream
}

func (x *emptyPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *emptyPingPongStream) Context() context.Context {
	return x.stream.Context()
}

func (x *emptyPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *emptyPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *emptyPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *emptyPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
