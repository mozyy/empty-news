// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/model/oauth.proto

package pbmodel

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/mozyy/empty-news/utils/orm"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	gorm_io_gorm "gorm.io/gorm"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OAuthTokenORM struct {
	ID             uint32 `gorm:"primary_key"`
	AccessToken    string
	TokenType      string
	RefreshToken   string
	ExpiresSeconds float64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      gorm_io_gorm.DeletedAt `gorm:"index"`
}

func (*OAuthTokenORM) TableName() string {
	return "o_auth_tokens"
}

func (o *OAuthTokenORM) ToPB() *OAuthToken {
	value := &OAuthToken{
		ID:             o.ID,
		AccessToken:    o.AccessToken,
		TokenType:      o.TokenType,
		RefreshToken:   o.RefreshToken,
		ExpiresSeconds: o.ExpiresSeconds,
		CreatedAt:      timestamppb.New(o.CreatedAt),
		UpdatedAt:      timestamppb.New(o.UpdatedAt),
	}
	deletedAtValue, _ := o.DeletedAt.Value()
	if deletedAt, ok := deletedAtValue.(time.Time); ok {
		value.DeletedAt = timestamppb.New(deletedAt)
	}
	return value
}

func (s *OAuthToken) ToORM() *OAuthTokenORM {
	value := &OAuthTokenORM{
		ID:             s.ID,
		AccessToken:    s.AccessToken,
		TokenType:      s.TokenType,
		RefreshToken:   s.RefreshToken,
		ExpiresSeconds: s.ExpiresSeconds,
		CreatedAt:      s.CreatedAt.AsTime(),
		UpdatedAt:      s.UpdatedAt.AsTime(),
	}
	value.DeletedAt.Scan(s.DeletedAt)
	return value
}

type OAuthClientORM struct {
	ID        uint32 `gorm:"primary_key"`
	Secret    string
	Domain    string
	User_ID   string
	CreatedAt time.Time
	UpdatedAt time.Time
	DeletedAt gorm_io_gorm.DeletedAt `gorm:"index"`
}

func (*OAuthClientORM) TableName() string {
	return "o_auth_clients"
}

func (o *OAuthClientORM) ToPB() *OAuthClient {
	value := &OAuthClient{
		ID:        o.ID,
		Secret:    o.Secret,
		Domain:    o.Domain,
		User_ID:   o.User_ID,
		CreatedAt: timestamppb.New(o.CreatedAt),
		UpdatedAt: timestamppb.New(o.UpdatedAt),
	}
	deletedAtValue, _ := o.DeletedAt.Value()
	if deletedAt, ok := deletedAtValue.(time.Time); ok {
		value.DeletedAt = timestamppb.New(deletedAt)
	}
	return value
}

func (s *OAuthClient) ToORM() *OAuthClientORM {
	value := &OAuthClientORM{
		ID:        s.ID,
		Secret:    s.Secret,
		Domain:    s.Domain,
		User_ID:   s.User_ID,
		CreatedAt: s.CreatedAt.AsTime(),
		UpdatedAt: s.UpdatedAt.AsTime(),
	}
	value.DeletedAt.Scan(s.DeletedAt)
	return value
}
